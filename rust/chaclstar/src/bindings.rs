/* automatically generated by rust-bindgen */

pub const crypto_auth_BYTES: u32 = 32;
pub const crypto_auth_KEYBYTES: u32 = 32;
pub const crypto_box_PUBLICKEYBYTES: u32 = 32;
pub const crypto_box_SECRETKEYBYTES: u32 = 32;
pub const crypto_box_BEFORENMBYTES: u32 = 32;
pub const crypto_box_NONCEBYTES: u32 = 24;
pub const crypto_box_ZEROBYTES: u32 = 32;
pub const crypto_box_BOXZEROBYTES: u32 = 16;
pub const crypto_hash_BYTES: u32 = 64;
pub const crypto_onetimeauth_BYTES: u32 = 16;
pub const crypto_onetimeauth_KEYBYTES: u32 = 32;
pub const crypto_scalarmult_BYTES: u32 = 32;
pub const crypto_scalarmult_SCALARBYTES: u32 = 32;
pub const crypto_secretbox_ZEROBYTES: u32 = 32;
pub const crypto_secretbox_BOXZEROBYTES: u32 = 16;
pub const crypto_sign_BYTES: u32 = 64;
pub const crypto_sign_PUBLICKEYBYTES: u32 = 32;
pub const crypto_sign_SECRETKEYBYTES: u32 = 64;
pub const crypto_stream_KEYBYTES: u32 = 32;
pub const crypto_stream_NONCEBYTES: u32 = 24;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __uint64_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn crypto_auth(
        output: *mut u8,
        input: *const u8,
        input_len: u64,
        key: *const u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_auth_verify(
        tag: *const u8,
        input: *const u8,
        input_len: u64,
        key: *const u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_box(
        cipher: *mut u8,
        message: *const u8,
        msg_len: u64,
        nonce: *const u8,
        pk: *const u8,
        sk: *const u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_box_open(
        msg: *mut u8,
        cipher: *const u8,
        cipher_len: u64,
        nonce: *const u8,
        pk: *const u8,
        sk: *const u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_box_keypair(pk: *mut u8, sk: *mut u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_box_beforenm(k: *mut u8, pk: *const u8, sk: *const u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_box_afternm(
        cipher: *mut u8,
        msg: *const u8,
        msg_len: u64,
        nonce: *const u8,
        key: *const u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_box_open_afternm(
        msg: *mut u8,
        cipher: *const u8,
        cipher_len: u64,
        nonce: *const u8,
        key: *const u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_hash(output: *mut u8, input: *const u8, input_len: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_onetimeauth(
        output: *mut u8,
        input: *const u8,
        input_len: u64,
        key: *const u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_onetimeauth_verify(
        tag: *const u8,
        input: *const u8,
        input_len: u64,
        key: *const u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_scalarmult_base(q: *mut u8, n: *const u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_scalarmult(q: *mut u8, n: *const u8, p: *const u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_secretbox(
        cipher: *mut u8,
        msg: *const u8,
        msg_len: u64,
        nonce: *const u8,
        key: *const u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_secretbox_open(
        msg: *mut u8,
        cipher: *const u8,
        cipher_len: u64,
        nonce: *const u8,
        key: *const u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_sign(
        signed_msg: *mut u8,
        signed_len: *mut u64,
        msg: *const u8,
        msg_len: u64,
        sk: *const u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_sign_open(
        unsigned_msg: *mut u8,
        unsigned_msg_len: *mut u64,
        msg: *const u8,
        msg_len: u64,
        pk: *const u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_sign_keypair(pk: *mut u8, sk: *mut u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_sign_secret_to_public(pk: *mut u8, sk: *mut u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_stream(
        cipher: *mut u8,
        cipher_len: u64,
        nonce: *const u8,
        key: *const u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_stream_xor(
        cipher: *mut u8,
        msg: *const u8,
        cipher_len: u64,
        nonce: *const u8,
        key: *const u8,
    ) -> ::std::os::raw::c_int;
}
